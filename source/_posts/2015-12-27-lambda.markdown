---
layout: post
title: C++ 的 lambda 
comments: false
date: 2015-12-27 11:21:32
tags:
	- C++ Primer
categories:
	- C/C++
---

_lambda_ 的主要用途是把函数当做参数的场景——以前大多用函数指针





{% blockquote Nicolai M.Josuttis 侯捷,C++标准库第二版-10.3.1 %}
谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。标准库算法所使用的谓词分为两类：一元谓词（_unary predicate_，意味着它们只接受单一参数）和二元谓词（_binary predicate_，意味着它们有两个参数）。接受谓词参数的算法对输入序列中的元素调用谓词。因此，元素类型必须能转换为谓词的参数类型。
{% endblockquote %}

<!--more-->

## _lambda_ 的基本形式

_lambda_ 是 _C++11_ 新增的`可调用对象(callable object)`

[^1]一个 _lambda_ 表达式表示一个可调用的代码单元，可以将其理解为一个未命名的内联函数。完整形式是

{% codeblock lambda 的通用形式 %}
[capture list] (parameter list) -> return type {function body}
{% endcodeblock %}

其中 _capture list、parameter list_ 和 _return type_ 都可以省略，即没有捕捉、参数和返回值

{% codeblock lang:cpp lambda 的最简形式 %}
[](){some code}
{% endcodeblock %}

[^1]:《C++ Primer 5th》- 10.3.2

{% blockquote %}
_C++_ 的可调用对象还有
* 函数
* 函数指针
* 重载了函数调用运算符`()`的类
{% endblockquote %}

## 传递参数

_lambda_ 的参数传递和普通的函数几乎没有差别，唯一需要了解的是

___lambda___ __的参数不能有默认值__

## 捕获列表

_capture list_ 给了 _lambda_ 不需要参数传递即可以访问所属代码块的局部变量的能力

{% codeblock lang:cpp 捕获示例 %}
#include <iostream>

using namespace std;

int main (int argc, char **argv)
{
  int ival {10};
  auto bf = [ival] ()
  {
      cout << ival << endl;
  };
  bf ();
  return 0;
}
{% endcodeblock %}

捕获列表的基本形式有[^2]

[^2]:《C++ Primer 5th》- 10.3.3

|形式|含义|
|:----:|:----|
|_[]_|空捕获列表。_lambda_ 不能使用所在函数中的变量
|_[names]_|_names_ 是一个逗号分隔的名字列表，这些名字都是 _lambda_ 所在函数的局部变量。默认情况下，捕获列表中的变量都被拷贝。名字前如果使用了 _&_ ，则采用引用捕获
|_[&]_|隐式引用捕获。_lambda_ 体中所使用的来自所在函数的实体都采用引用方式使用
|_[=]_|隐式值捕获
|_[&, identifier_list]_|_identifier_list_ 是一个逗号分隔的列表，包含 _0_ 个或多个来自所在函数的变量。这些变量采用值捕获方式，而任何隐式捕获的变量都采用引用方式捕获。_identifier_list_ 中的名字前面不能使用 _&_
|_[=, identifier_list]_|_identifier_list_ 中的变量都采用引用方式捕获，而任何隐式捕获的变量都采用值方式捕获。_identifier_list_ 中的名字不能包括 _this_ ，且这些名字之前必须使用 _&_

### 捕获的意义

在使用标准库算法时，_lambda_ 捕获能让问题变得简单。

考虑：
* 一个 _vector_ 容器存储了随机长度的 _string_
* 用 _for_each_ 打印出容器中 {% raw %} $长度 \le N$ {% endraw %} 的字符串

{% codeblock lang:cpp for_each 原型 %}
template< class InputIt, class UnaryFunction >
UnaryFunction for_each( InputIt first, InputIt last, UnaryFunction f );
{% endcodeblock %}

_for_each_ 的第 _3_ 个参数是一元谓词，为了能输出字符串内容，谓词的参数肯定是 _string_ 类型——_N_ 没有地方表达

{% codeblock lang:cpp 硬编码 N %}
#include <iostream>
#include <random>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main (int argc, char **argv)
{
  std::random_device rd;
  vector<string> svec;
  for (int i = 0; i < 20; ++i)
    svec.push_back (string (rd () % 15 + 1, 'x'));

  for_each (svec.begin (), svec.end (), [] (const string & s)
  {
      if (s.length () <= 5)
        cout << s << endl;
  });
  return 0;
  {% endcodeblock %}

为了能应对 {% raw %} $N = 6$ {% endraw %} 的情况，必须修改源代码把 _lambda_ 中的 _N_ 改为 _6_——这个时候就该`捕获`发挥作用了

{% codeblock lang:cpp 捕获 N %}
int main (int argc, char **argv)
{
  /*
   * 构造一个 svec 
  */

  int N = 6;

  for_each (svec.begin (), svec.end (), [N] (const string & s)
  {
      if (s.length () <= N)
        cout << s << endl;
  });
  return 0;
}
{% endcodeblock %}

### 可变 _lambda_

默认情况下，_lambda_ 内的代码是不允许修改值捕获对象的

{% codeblock lang:cpp 错误的示例 %}
int iv {10};
auto lmb = [=] ()
{
    iv = 1;
};
{% endcodeblock %}

这段代码无法通过编译

{% codeblock gcc 的错误提示 %}
error: assignment of read-only variable ‘iv’
{% endcodeblock %}

{% codeblock clang++ 的错误提示 %}
error: cannot assign to a variable captured by copy in a non-mutable lambda
{% endcodeblock %}

应对这种情况，必须在参数列表后加上 _mutable_ 关键字

{% codeblock lang:cpp mutable lambda %}
auto lmb = [=] () mutable
{
    iv = 1;
};
{% endcodeblock %}

在 _lambda_ 内修改值捕获对象并不会影响外部的值，_C++_ 的这个限制应该是为了防止值被无修改引发的 _bug_

### 修改引用捕获

引用捕获对象的修改没有值捕获的限制，仅仅受引用原始对象是否是 _const_ 类型影响

## 返回类型

{% blockquote @C++ Reference http://en.cppreference.com/w/cpp/language/lambda %}
* until C++14
  * if the body consists of nothing but a single return statement with an expression, the return type is the type of the returned expression (after lvalue-to-rvalue, array-to-pointer, or function-to-pointer implicit conversion);
  * otherwise, the return type is void.
* since C++14
  * The return type is deduced from return statements as if for a function whose return type is declared auto.
{% endblockquote %}
    
 <br>   
     
_lambda_ 返回类型在实际使用中发现并不像上面说的这样——实际上是可以正确推导的——从[C++ PATCH for core issue 975 (extended lambda return type deduction)](https://gcc.gnu.org/ml/gcc-patches/2011-08/msg01901.html) 可以看到，这一问题已经被修复了

同时在[Return type deduction with multi-statement lambdas](http://stackoverflow.com/questions/14450608/return-type-deduction-with-multi-statement-lambdas)提到，_GCC 4.8.1_ 和 _clang 3.3_ 已经包含了这个 _path_
