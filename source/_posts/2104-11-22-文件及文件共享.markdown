---
layout: post
title: "文件及文件共享"
date: 2014-11-22 19:32:31 +0800
comments: false
categories:
  - C/C++
tags:
  - Advanced Programming in the UNIX Environment
---



由于之前在 _O_APPEND_ 上做了 {% post_link O_APPEND的一次犯二测试 一个极其二 B 的测试 %} , 倒是好好看了下操作系统里面和文件以及文件共享相关的东西
<!--more-->

## 和文件相关的三个重要数据结构

1. 文件描述符 : _file description_
2. 文件表项 : _file table_
3. 文件节点 : _v node_

这三个数据结构其实蛮复杂的, 但是如果只关注和共享相关的部分的话, 倒是没那么复杂

为了方便描述, 这三个数据结构, 得倒过来说

### 文件节点

在 _Linux_ 上叫 _i node_ 了

这个信息是在打开文件的时候从磁盘读到内存里面来的, 包含了文件的实际信息

更详细的东西 _APUE_ 没有讲了, 也不想去查, 因为太底层了. 先简单的认为这个就表示磁盘上真实的文件吧

### 文件表项

这是一个内核结构, 不属于用户态的东西, 也就是说 _fork_ 子进程的时候这个结构是不会复制的

这个结构和共享相关的关键信息主要是

* 当前文件偏移量
* 指向文件节点的指针 

### 文件描述符

```c
int fd = open("file_path", int flags, mode_t mode);
```

平常用系统 _API_ 操作文件的时候, 把这个 _fd_ 叫做文件描述符, 但实际上并不是这样

编号|_fd_ 标志|文件表项指针
:---:|:---:|:----:
0| | |
1| |  |

在进程表中有类似上面的这样一张表, 每一行(其实就是一个结构体)表示一个打开的文件, 这样的一行才是文件描述符的本体. 而 _open_ 返回的那个 _int_ 值, 是这张表的索引位置. 但是为了简化, 直接把 _fd_ 叫做文件描述符也是可以的

在文件描述符中, 和共享关系最大的, 就是 `文件表项指针` 部分

## 打开文件

每次执行 _open_ , 都会新建

1. 文件描述符
2. 文件表项

但 `文件节点` 总是只有一个, 所以如果多次打开同一个文件, 则文件节点会被多个文件表项引用

## 关闭文件

1. 会把文件描述符的记录项从表中删除, 同时把对应的文件表项的引用数减 _1_
2. 文件表项需不需要删除则要看这个文件表项的被引用数是否为 _0_

这里其实隐含了一个意思 : 文件表项可以被多个不同的文件描述符引用

## 文件共享

在两(多)个进程间共享同一个文件, 有好几种不同的实现方法

### 直接打开两次

```c
#include <apue.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#define BUFSIZE 1024*1024*100
int main()
{
    pid_t pid;
    int pfd = open("data.txt", O_CREAT|O_RDWR, FILE_MODE);
    if ((pid = fork()) < 0)
    {
        err_sys("fork error");
    } else if (pid == 0)
    {
        sleep(1);
        int cfd = open("data.txt", O_CREAT|O_RDWR, FILE_MODE);
        if (write(cfd, "child\n", 6) == -1)
            err_sys("write in child error");
        exit(0);
    }
    if (write(pfd, "parent\n", 7) == -1)
        err_sys("write in parent error");
    return 0;
}
```

这个代码里面的就是最简单最直接的文件共享了 : 在两个进程中把同一个文件打开两次, 使用不同的文件描述符

从上面数据结构的介绍可以知道, 这样最大的问题就是 : 两个文件描述符对应的不同的文件表项, 所以会有两个独立的当前文件偏移

如果执行上面这段代码, 会发现输出的文件内容会随机的覆盖, 只有在两个进程中都添加 _O_APPEND_ 标志, 才能保证内容不丢失

### 共享文件描述符

```c
#include <apue.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#define BUFSIZE 1024*1024*100
int main()
{
    pid_t pid;
    int pfd = open("data.txt", O_CREAT|O_RDWR, FILE_MODE);
    if ((pid = fork()) < 0)
    {
        err_sys("fork error");
    } else if (pid == 0)
    {
        sleep(1);
//      int cfd = open("data.txt", O_CREAT|O_RDWR, FILE_MODE);
        if (write(pfd, "child\n", 6) == -1)  // <---- use pfd here
            err_sys("write in child error");
        exit(0);
    }
    if (write(pfd, "parent\n", 7) == -1)
        err_sys("write in parent error");
    return 0;
}
```

_fork_ 可以让文件描述符在父子进程间共享, 但是由于文件表项是内核的东西, 所以两个不同的文件描述符指向同一个文件表项 :  parent-pfd 和 child-pfd 都指向调用 _open_ 时建立的文件表项

在这种情况下两个进程会共享同一个当前文件偏移, 所以内容不会覆盖

同时, 如果在子进程中调用 _close(pfd)_ , 并不会造成父进程无法操作文件, 原因就是上面提到的文件表项是否删除, 要看它的被引用数是否为 _0_ : 在这里 _fork_ 后文件表项的引用是 _2_, 子进程调用 _cloes_ 后, 父进程还在引用这个文件表项, 所以还是可以访问的

### _dup_

_dup_ 和 _dup2_ 会返回一个文件描述符, 它和参数传入的文件描述符指向同一个文件表项

### fcntl

_fcntl_ 使用特定的参数组合, 可以实现和 _dup_ 一样的语义

## 另

其实从上面也可以看到, 当一个文件用 _open_ 打开后, 会建立两个指向关系

1. 文件描述符 -> 文件表项
2. 文件表项 -> 文件节点

其实  

* 只有 _close_ 会改变文件表项到文件节点的指向关系 : 断开关系
* 只有 _open_ 会建立文件表项到文件节点的指向关系
* _dup, dup2, fcntl_ 这类函数, 只会改变文件描述符到文件表项的关系, 无法操作文件表项到文件节点的关系